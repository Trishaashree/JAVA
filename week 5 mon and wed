 12.08.2024
class Main {
    int x;
    public Main(int y){
        x=y;
    }
    public static void main(String[] args) {
        Main myobj=new Main(5);
        System.out.println(myobj.x);
    }
}


class Main{
    int modelYear;
    String modelName;
    double modelMileage;
    public Main(int year,String name,double mileage){
        modelYear=year;
        modelName=name;
        modelMileage=mileage;
    }
    public static void main(String[] args){
        Main myCar=new Main(1969,"Mustang",14.5);
        System.out.println(myCar.modelYear+" "+myCar.modelName+" "+myCar.modelMileage);
    }
}


abstract class Main{
    public String fname="John";
    public int age=24;
    public abstract void study();
}
class Student extends Main{
    public int graduationYear=2018;
    public void study(){
        System.out.println("Studying all day long");
    }
}
class Second{
    public static void main(String[] args){
        Student myObj=new Student();
        System.out.println("Name: "+myObj.fname);
        System.out.println("Age: "+myObj.age);
        System.out.println("Graduation Year: "+myObj.graduationYear);
        myObj.study();
    }
}


public class Main{
    public static void main(String[] args){
        Person myObj=new Person();
        myObj.setName("John");
        System.out.println(myObj.getName());
    }
}
 class Person{
    private String name;
    public String getName(){
        return name;
    }
    public void setName(String newName){
        this.name=newName;
    }
}

Inheritance
class Vehicle{
    protected String brand="Ford";
    public void honk(){
        System.out.println("Tuut,tuut!");
    }
}
class Car extends Vehicle{
    private String modelName="Mustang";
    public static void main(String[] args){
        Car myFastCar=new Car();
        myFastCar.honk();
        System.out.println(myFastCar.brand+" "+myFastCar.modelName);
    }
}

Por
class Animal{
    public void animalSound(){
        System.out.println("The animal makes a sound"); 
    }
}
class Pig extends Animal{
    public void animalSound(){
        System.out.println("The pig says: wee wee");
    }
}
class Dog extends Animal{
    public void animalSound(){
        System.out.println("Thr dog says: bow wow");
    }
}
class Main{
    public static void main(String[] args){
Animal myAnimal=new Animal();
Animal myPig=new Pig();
Animal myDog=new Dog();

myAnimal.animalSound();
myPig.animalSound();
myDog.animalSound();
}
}


14.08.2024

Inner class

class OuterClass{
    int x=10;
    class InnerClass{
        int y=5;
    }
}
public class Main{
    public static void main(String[] args){
        OuterClass myOuter=new OuterClass();
        OuterClass.InnerClass myInner=myOuter.new InnerClass();
        System.out.println(myInner.y+myOuter.x);
    }
}


class OuterClass{
    int x=10;
    static class InnerClass{
        int y=5;
    }
}
public class Main{
    public static void main(String[] args){
        OuterClass.InnerClass myInner=new OuterClass.InnerClass();
        System.out.println(myInner.y);
    }
}

class OuterClass{
    int x=10;
     class InnerClass{
        public  int myInnerMethod(){
            return x;
        }
    }
}
public class Main{
    public static void main(String[] args){
        OuterClass myOuter=new OuterClass();
        OuterClass.InnerClass myInner=myOuter.new InnerClass();
        System.out.println(myInner.myInnerMethod());
    }
}

Abrtact classes and methods

abstract class Animal{
    public abstract void animalSound();
    public void sleep(){
        System.out.println("Zzz");
    }
}
class Pig extends Animal{
    public void animalSound(){
        System.out.println("The pig says: wee wee");
    }
}
class Main{
    public static void main(String[] args){
        Pig myPig=new Pig();
        myPig.animalSound();
        myPig.sleep();
    }
}

Interfaces
interface Animal{
    public void animalSound();
    public void sleep();
}
class Pig implements Animal{
    public void animalSound(){
        System.out.println("The pig says: wee wee");
    }
    public void sleep(){
        System.out.println("Zzz");
    }
}
class Main{
    public static void main(String[] args){
        Pig myPig=new Pig();
        myPig.animalSound();
        myPig.sleep();
    }
}


interface FirstInterface{
    public void myMethod();
}
interface SecondInterface{
    public void myOtherMethod();
}
class DemoClass implements FirstInterface,SecondInterface{
    public void myMethod(){
        System.out.println("Some text..");
    }
    public void myOtherMethod(){
        System.out.println("Some text..");
    }
}
class Main{
    public static void main(String[] args){
        DemoClass myObj=new DemoClass();
        myObj.myMethod();
        myObj.myOtherMethod();
    }
}

ENUM

enum Level{
    LOW,
    MEDIUM,
    HIGH
}
public class Main{
    public static void main(String[] args){
        Level myvar=Level.MEDIUM;
        System.out.println(myvar);
    }
}

public class Main{
enum Level{
    LOW,
    MEDIUM,
    HIGH
}
    public static void main(String[] args){
        Level myvar=Level.MEDIUM;
        System.out.println(myvar);
    }
}

enum Level{
    LOW,
    MEDIUM,
    HIGH
}
public class Main{
    public static void main(String[] args){
        Level myvar=Level.MEDIUM;
        switch(myvar){
            case LOW:
            System.out.println("Low level");
            break;
            case MEDIUM:
            System.out.println("Medium level");
            break;
            case HIGH:
            System.out.println("High level");
            break;
                
        }
    }
}

Dates
import java.time.LocalDate;
public class Main{
    public static void main(String[] args){
        LocalDate myObj=LocalDate.now();
        System.out.println(myObj);
    }
}
